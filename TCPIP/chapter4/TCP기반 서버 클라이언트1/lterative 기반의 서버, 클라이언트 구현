iterative -> n개의 서비스를 제공하는

iterative 서버의 구현
	socket() -> bind -> listen -> accept -> read/write -> close(client) -> 다시 accept로(반복이 끝나면 -> close(server))

	이와 같이 반복적으로 accept 함수호출하면 계속해서 클라이언트의 연결요청을 수락할 수 있다. 그러나, 동시에 둘 이상의 클라이언트에게 서비스할 수 있는 모델은 아니다.

	서버가 iterative 형태로 동작한다해도 클라이언트 코드에는 별 차이가 없다.
	iterative 형태로 동작하는 에코 서버, 그리고 이와 함께 동작하는 에코 클라이언트의 동작방식은 다음과 같다.
		- 서버는 한 순간에 하나의 클라이언트와 연결되어 에코 서버스를 제공한다.
		- 서버는 총 다섯 개의 클라이언트에게 순차적으로 서비스를 제공하고 종료한다.
		- 클라이언트는 프로그램 사용자로부터 무낮열 데이터를 입력 받아서 서버에 전송한다.
		- 서버는 전송 받은 문자열 데이터를 클라이언트에게 전송한다. 즉, 에코 시킨다.
		- 서버와 클라이언트간의 문자열 에코는 클라이언트가 q를 입력할 때까지 계속한다.(echo_server.c 열어봐라)

에코 클라이언트의 문제점
	write(sock, message, strlen(message));
	str_len = read(sock, message, BUF_SIZE - 1);
	message[str_len] = 0;
	printf("Message from server: %s", message);

	tcp는 데이터의 경계가 존재하지 않기 때문에 (클라이언트는 tcp클라이언트이다.) 둘 이상의 write 함수호출로 전달된 문자열 정보가 묶여서 한번에 서버로 전송될 수 있다.
	이러한 상황이 발생하면 클라이언트는 한번에 둘 이상의 문자열 정보를 서버로부터 되돌려 받아서, 원하는 결과를 얻지 못할 수 있다.

	서버는 한번의 write함수호출로 데이터 전송을 명령했지만, 전송할 데이터의 크기가 크다면,
	운영체제는 내부적으로 이를 여러 개의 조각으로 나눠서 클라이언트에게 전송할 수도 있는 일이다.
	이 과정에서 데이터의 모든 조각이 클라이언트에게 전송되지 않았음에도 불구하고, 클라이언트는 read함수를 호출할지도 모른다.
	이 모든 문제가 tcp의 데이터 전송특성에서 비롯된 것이다.