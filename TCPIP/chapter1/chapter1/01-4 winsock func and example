윈도우 기반 소켓관련 함수들

#include <winsock2.h>

SOCKET socket(int af, int type, int protocal);
	-> 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환
	리눅스의 socket 함수에 대응
		리눅스는 정수를 int형식에 저장하지만 windows는 socket 반환형 함수에 저장

int bind(SOCKET s, const struct sockaddr* name, int namelen);
	->성공 시 0, 실패 시  socket_error 반환
		리눅스 bind 함수에 대응
		리눅스에서 파일 디스크립터에 해당하는 것을 윈도우에서는 핸들이라고 한다!

int listen(SOCKET s, int backlog);
	->성공 시 0, 실패 시 SOCKET_ERROR 반환

int accept(SOCKET s, struct sockaddr* addr, int* addrlen);
	-> 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환

int connetc(SOCKET s, const struct sockaddr * name, int namelen);
	-> 성공 시 0, 실패 시 SOCKET_ERROR 반환

int closesocket(SOCKET s);
	-> 성공 시 0, 실패 시 SOCKET_ERROR 반환

리눅스 - file close

windows - 소켓 )
		- 파일 ) 별도의 종료함수 제공

1. 소켓의 생성과정에 따른 함수의 호출
2. 리눅스 기반에서 호출했던 소켓 기반 입출력 함수에 어떠한 차이가 있는가?

	소켓 생성 | 리눅스 = windows
	송수신    | 리눅스 != win  windows는 소켓과 파일을 분리함.


윈도우 기반 입출력 함수

#include <winsock2.h>

int send(SOCKET s, const char * buf, int len, int flags);
	-> 성공 시 전송된 바이트 수, 실패 시 SOCKET_ERROR 반환
	s : 데이터 전송 대상과의 연결을 의미하는 소켓의 핸들 값 전달
	buf : 전송하 데이터를 저장하고 있는 버퍼의 주소 값 전달.
	len : 전송할 바이트 수 전달
	flags : 데이터 전송 시 적용할 다양한 옵션 정보 전달

1. 리눅스와 달리 파일과 소켓을 변도의 리로스로 구현함.
2. 파일 입출력 함수와 소켓 기반 입출력 함수에 차이가 있다.
	- linux : write, read
	- windows : send, recv

int recv(SOCKET s, const char * buf, int len, int flags);
	-> 성공 시 수신한 바이트 수(단 EOF 전송 시 0), 실패 시 SOCKET_ERROR 반환
	s : 데이터 수신 대상과의 연결을 의마하는 소켓의 핸들 값 전달.
	buf : 수신된 데이터를 저장할 버퍼의 주소 값 전달.
	len : 수신할 수 있는 최대 바이트 수 전달.
	flags : 데이터 수신 시 적용할 다양한 옵션 정보 전달.

내용 확인 문제

	