다중접속 서버의 구현방법
	- 멀티프로세스 기반 서버 : 다수의 프로세스를 생성하는 방식으로 서비스 제공
	- 멀티플렉싱 기반 서버 : 입출력 대상을 묶어서 관리하는 방식으로 서비스 제공
	- 멀티쓰레딩 기반 서버 : 클라이언트의 수만큼 쓰레드를 생성하는 방식으로 서비스 제공

프로세스의 이해
	프로세스란? 
		- 간단하게는 실행중인 프로그램
		- 메모리 공간을 차지한 상태에서 실행중인 프로그램
		- 실행 중인 프로그램에 관련된 메모리, 리소스 등을 총칭하는 의미이다.
	
	멀티프로세스 운영체제는 둘 이상의 프로세스를 동시에 생성이 가능하고, 즉 멀티프로세스는 운영체제에 의존적이다.

	프로세스는 운영체제의 관점에서 프로그램 흐름의 기본 단위가 되며, 여러 개의 프로세스가 생성되면 이들은 동시에 실행이 된다.
	그러나 하나의 프로그램이 실행되는 과정에서 여러 개의 프로세스가 생성되기도 한다.

tip) Thread => 경량화된 process

프로세스 ID (운영체제가 프로세스에 할당하는 ID)
	
	모든 프로세스는 생성되는 형태에 상관없이 운영체제로부터 ID를 부여받는다.

fork 함수호출을 통한 프로세스의 생성
	
	#include <unistd.h>

	pid_t fork(void);
		-> 성공 시 자식 프로세스ID, 실패 시 -1
		if 자식 프로세스가 fork함수 호출할 경우 '0'반환

	fork 함수는 호출한 프로세스의 복사본을 생성한다.
	fork 함수가 호출되면, 호출한 프로세스가 복사되어 fork 함수 호출 이후를 각각의 프로세스가 독립적으로 실행하게 된다.

	부모 프로세스(Parent Process)란 원본 프로새스, 즉, fork 함수를 호출한 주체이다.
	자식 프로세스(Child Process)는 부모 프로세스의 fork 함수 호출을 통해서 복사된 프로새스를 의미한다.

	parent process
		int gval = 10;
		int main(void)
		{
			int lval = 20;
			lval += 5;
			gval++;
			pid_t pid=fork();
			if(pid == 0)
				gval++
			else
				lval++;
		}

	child process
		gval은 11로 복사
		int main()
		{
			// lval은 25로 복사
			.
			.
			.
			pid_t pid =fork()
			if(pid == 0)
				gval++;
			else
				lval++;
			.
			.
			.
		}	

		이렇듯 fork 함수 호출 이후의 반환 값은 다음과 같고, 따라서 반환값의 차를 통해 부모 프로세스와 자식 프로세스의 프로그램 흐름을 구분하게 된다.

