주소정보의 표현
	IPv4 기반의	주소표현을 위한 구조체
		
		sockaddr을 IPv4에 맞게 바꾼것 -> Struct sockaddr_in // IP주소와 port 번호는 구조체 sockaddr_in의 변수에 담아서 표현한다.
		{
			sa_family_t sin_family; // 주소체계(adress family)
			uint16_t	sin_port;	// 16비트 TCP/UDP PORT번호
			struct in_addr	sin_addr; // 32비트 IP주소
			char		sin_zero[8];	// 사용되지 않음
		};

		struct in_addr
		{
			in_addr_t	s_addr;	// 32비트 IPv4 인터넷 주소
		};
	
	구조체 sockaddr_in의 멤버에 대한 분석
		sin_family - 주소체계 정보저장
		sin_port = 16비트 prot번호 저장, 네트워크 바이트 순서 저장
		sin_addr = 32비트 IP주소정보 저장, 네트워크 바이트 순서로 저장, 멤버 sin_addr의 구조체 자료형 in_addr(사실상 32bit 정수 자료형)
		sin_zero - 특별한 의미를 지니지 않ㅎ는 멤버. 반드시 0으로 채워야 함.

		sa_data에 저장되는 주소정보에는 IP주소와 port번호가 포함되어 있어야 되고 이 두가지 정보를 담고 남은 부분은 0으로 채울 것을 bind 함수는 요구하고 있다.
		그래서 구조체 sockaddr_in이 등장한 것이며, 이 때 형성되는 구조체 변수의 바이트 열이 bind 함수가 요구하는 바이트 열이 된다.
		결국 인자전달을 위한 형변환을 통해서 sockaddr 구조체 변수에 bind 함수가 요구하는 바대로 데이터를 채워 넣는 효과를 볼 수 있다.

네트워크 바이트 순서와 인터넷 주소 변환.
	저장순서가 다르다는 것은 전송되어온 데이터의 해석순서가 다름을 뜻한다.
	
	바이트 순서와 네트워크 바이트 순서
		빅 엔디안 - 상위 바이트 값을 작은 번지수에 저장하는 방식
		리틀 엔디안 - 상위 바이트 값을 큰 번지수에 저장하는 방식

		cpu에 따라서 상위 바이트를 하위 메모리 주소에 저장하기도 하고, 상위바이트를 상위 메모리 주소에 저장하기도 한다.
		즉, cpu마다 데이터를 표현 및 해석하는 방식이 다르다.
		
		cpu의 데이터 저장방식을 의미하는 '호스트 바이트 순서(host byte order)'는 cpu에 따라서 차이가 난다.
		네트워크를 통해서 데이터를 전송할 때에는 통일된 기준으로 데이터를 전송하기로 약속하였으며, 이 약속을 가리켜 '네트워크 바이트 순서(network byte order)'라 한다.
		네트워크 바이트 순서의 약속은 매우 간단한데, "빅 엔디안으로 통일"이다.

		네트워크 상으로 데이터를 전송할 떄에는 데이터의 배열을 빅 엔디안 기준으로 변경해서 송수신하기로 약속한 것이며,
		모든 컴퓨터는 수신된 데이터가 네트워크 바이트 순서로 정렬되어 있음을 인식해야 하며, 
		리튼 엔디안 시스템에서는 데이터를 전송하기에 앞서 빅 엔디안의 정렬방식으로 데이터를 재정렬해야한다.

	바이트 순서의 변환
		ex) unsigned short ntohs(unsigned short);
			-> ntohs에서 h는 host byte order를 의미
			-> n은 network를 의미
			-> s는 자료형 short 의미
			-> l은 자료형 long을 의미

		따라서 빅 엔디안 시스템에서도 호스트 바이트 순서를 네트워크 바이트 순서로 변환하는 것이 좋다. 아무런 변화가 일어나지 않더라도 말이다.
		
인터넷 주소의 초기화와 할당

	#include <arpa/inet.h>

	in_addr_t inet_addr(const char * string);
		-> 성공 시 빅 엔디안으로 변환된 32비트 정수 값, 실패 시 INADDR_NONE 반환
		위 함수는 인자로 "211.214.107.99"와 같이 점이 찍힌 10진수로 표현된 문자열을 전달하면, 해당 문자열 정보를 참조해서 IP주소 정보를 32비트 정수형으로 반환한다.

		inet_addr 함수는 32비트 정수형태로 ip주소를 변환할 뿐만 아니라, 유효하지 못한 ip주소에 대한 오류검출 능력도 갖고 있다.

	int inet_aton(const char * string, struct in_addr * addr);
		-> 성공 시 true, 실패시 false반환
		string - 변환할 ip주소 정보를 담고 있는 문자열의 주소 값 전달.
		addr - 변환된 정보를 저장할 in_addr 구조체 변수의 주소 값 전달.
		inet_aton 함수도 기능상으로는 inet_addr 함수와 동일하며, 문자열 형태의 Ip주소를 32bit 정수, 그것도 네트워크 바이트 순서로 정렬해서 반환한다.
		다만 구조체 변수 in_addr를 이용하는 형태라는 점에서 차이가 있다.

		inet_addr 함수를 사용할 경우, 변환된 IP주소 정보를 구조체 sockaddr_in에 선언되어 있는 in_addr 구조체 변수에 대입하는 고정을 추가로 거쳐야 한다.
		그러나 위 함수를 사용할 경우 별도의 대입과정을 거칠 필요없이 인자로 in_addr 구조체 변수의 주소 값을 전달하면, 변환된 값이 자동으로 in_addr 구조체 변수에 저장된다.

	char *inet_ntoa(struct in_addr adr);
		-> 성공 시 변환된 문자열의 주소 값, 실패 시 -1 반환
		위 함수는 인자로 전달된 정수형태의 IP정보를 참조하여 문자열 혈태의 IP정보로 변환해서, 변환된 문 문자열의 주소 값을 반환한다.
		주의할 점은 반환형이 char형 포인터라는 사실이다.
		이는 문자열의 주소 값이 반환된다는 것이 이미 문자열이 메모리공간에 저장되었다는 뜻이다.
		함수 내부적으로 메모리공간을 할당해서 변환된 문자열 정보를 저장한다. 
		따라서 이 함수호출 후에는 가급적 반환된 문자열 정보를 다른 메모리 공간에 복사해 두는 것이 좋다.

		정리하면, inet_ntoa 함수가 재호출되기 전까지만 반환된 문자열의 주소 값이 유효하니, 오랫동안 문자열 정보를 유지해야 한다면 별도의 메모리 공간에 복사해야한다.

	인터넷 주소의 초기화
		일반적인 인터넷 주소의 초기화 과정
	
		struct sockaddr_in addr; // 구조체 선언
		char *serv_ip="211.217.168.13";	// IP주소 문자열 선언
		char *serv_port="9190";	// port번호 문자열 선언
		memset(&addr, 0, sizeof(addr)); // 구조체 변수 addr의 모든 멤버 0으로 초기화
		addr.sin_family=AF_INET; // 주소체계 지정
		addr,sin_addr.s_addr=inet_addr(serv_ip); // 문자열 기반의 ip주소 초기화
		addr.sin_port=htons(atoi /*문자열을 정수로 변환 */ (serv_port)); // 문자열 기반의 port번호 초기화
	
	클라이언트의 주소정보 초기화
		"IP 211.217.168.13, port 9190으로 들어오는 데이터는 내게로 보내라" -> 서버에서 주소 정보를 설정하는 이유
		
		"IP 211.217.168.13, port 9190으로 연결해라" -> 클라이언트에서 주소정보를 설정하는 이유

	INADDR_ANY
		서버 소켓의 생성과정에서 매번 서버의 IP주소를 입력하는 것은 귀찮은 일이 될 수 있다.
		
			struct sockaddr_in addr;
			char *serv_port="9190";	
			memset(&addr, 0, sizeof(addr)); 
			addr.sin_family=AF_INET; 
			addr,sin_addr.s_addr=inet_addr(INADDR_ANY); 
			addr.sin_port=htons(atoi(serv_port)); 

			현재 실행중인 컴퓨터의 IP소켓에 부여할 떄 사용하는 것이 INADDR_ANY이다. 이는 서버 프로그램 구현에 주로 사용된다.

		INADDR_ANY라는 이름의 상수를 통해서 서버의 IP주소를 할당하고 있다는 점인데,
		소켓의 IP주소를 이렇게 초기화할 경우 소켓이 동작하는 컴퓨터의 ip주소가 자동으로 할당되기 때문에 ip주소를 직접 입력하는 수고를 덜수있다.
		또한 컴퓨터 내에 두 개 이상의 IP를 할당 받아서 사용하는 경우, 할당 받은 IP중 어떤 주소를 통해서 데이터가 들어오더라도 port번호만 일치하면 수신할 수 있다.

		
	charter 01의 hello_server.c, hello_client.c 분석
		main함수에 전달된 9190은 port번호이다. 서버 소켓의 생성에 필요한 port번호를 전달하면서 프로그램을 실행하였다.
		소켓에 ip주소는 전달하지 않았는데, 그 이유는 INADDR_ANY를 통한 IP주소의 초기화에서 찾을 수 있다.

		서버 프로그램의 실행방식과 비교해서 클라이언트 프로그램의 차이점은 IP주소 정보를 전달하는가 아닌가 이다.
		
		127.0.0.1 9190을 가리켜 '루프백 주소'라 하며 이는 컴퓨터 자신의 IP주소를 의미한다.
		이를 대신해서 실제 컴퓨터의 ip주소를 입력해도 프로그램은 동작한다.
		뿐만 아니라, 서버와 클라이언트를 서로 다른 두 대의 컴퓨터에서 각각 실행할 경우에는 이를 대신해서 서버의 ip주소를 입력하면 된다.

	소켓에 인터넷 주소 할당하기

		#include <sys/socket.h>
		
		int bind(int sockfd, struct sockaddr *myaddr, socklent_t addrlen)
			-> 성공 시 0, 실패 시 -1 반환
			sockfd - 주소정보를 할당할 소켓의 파일디스크립터.
			myaddr - 할당하고자 하는 주소정보를 지니는 구조체 변수의 주소 값.
			addrlen - 두 번쨰 인자로 전달된 구조체 변수의 길이 정보

		int serv_sock;
		struct sockaddr_in serv_addr;
		char *serv_port="9190";

		/* 서버 소켓(리스닝 소켓) 생성 */
		serv_sock=socket(PF_INET, SOCK_STREAM, 0);

		/* 주소정보 초기화 */
		memset(&serv_addr, 0, sizeof(serv_addr)); 
		addr.sin_family=AF_INET; 
		addr,sin_addr.s_addr=htonl(INADDR_ANY); 
		addr.sin_port=htons(atoi(serv_port)); 

		/* 주소 정보 할당 */
		bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr));